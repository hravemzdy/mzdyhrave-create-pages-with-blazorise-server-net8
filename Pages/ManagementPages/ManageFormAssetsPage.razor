@page "/manage-assets"

@using Blazorise.DataGrid
@using EmployeeManagementApp.Components
@using EmployeeManagementApp.Components.ManageGrid
@using EmployeeManagementApp.Components.ManageForm
@using EmployeeManagementApp.Extensions;
@using EmployeeManagementApp.Models;

<AssetGrid GItem="WorkerTableModel" Title="Workers" Elements="WorkersElements" FilterFunc="@WorkersFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumn Caption="Worker Id" Sortable=false Field=@nameof(WorkerTableModel.TableId) />
    <AssetGridColumn Caption="Worker name" Sortable=false Field=@nameof(WorkerTableModel.WorkerName) />
    <AssetGridColumn Caption="Worker access code" Sortable=false Field=@nameof(WorkerTableModel.WorkerAccessCode) />
    <AssetGridColumn Caption="Date added" Sortable=false Field=@nameof(WorkerTableModel.DateAdded) />
</AssetGrid>
<AssetForm FItem="WorkerAddModel" FormPadding="Padding.Is3">
    <AssetFormBlock FItem="WorkerAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6" OnItemAdd="@OnWorkerAdded">
        <AssetFormBlockField FItem="WorkerAddModel" Label="First name:" 
                             Validate=true FeedbackNone="" FeedbackGood="" FeedbackError="First name is required!"
                             ModelExpression="@((m) => m.FirstName)" />
        <AssetFormBlockField FItem="WorkerAddModel" Label="Last name:"
                             Validate=true FeedbackNone="" FeedbackGood="" FeedbackError="Last name is required!"
                             ModelExpression="@((m) => m.LastName)" />
    </AssetFormBlock>
</AssetForm>

<AssetGrid GItem="JobTableModel" Title="Jobs" Elements="JobsElements" FilterFunc="@JobsFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumn Caption="Job Id" Sortable=false Field=@nameof(JobTableModel.TableId) />
    <AssetGridColumn Caption="Job title" Sortable=false Field=@nameof(JobTableModel.JobTitle) />
    <AssetGridColumn Caption="Date added" Sortable=false Field=@nameof(JobTableModel.DateAdded) />
</AssetGrid>
<AssetForm FItem="JobAddModel" FormPadding="Padding.Is3">
    <AssetFormBlock FItem="JobAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6" OnItemAdd="@OnJobAdded">
        <AssetFormBlockField FItem="JobAddModel" Label="Job title:"
                             Validate=true FeedbackNone="" FeedbackGood="" FeedbackError="Job's title is required!"
                             ModelExpression="@((m) => m.Title)" />
    </AssetFormBlock>
</AssetForm>

<AssetGrid GItem="BuildingTableModel" Title="Buildings" Elements="BuildingsElements" FilterFunc="@BuildingsFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumn Caption="Building Id" Sortable=false Field=@nameof(BuildingTableModel.TableId) />
    <AssetGridColumn Caption="Building title" Sortable=false Field=@nameof(BuildingTableModel.BuildingTitle) />
    <AssetGridColumn Caption="Date added" Sortable=false Field=@nameof(BuildingTableModel.DateAdded) />
</AssetGrid>
<AssetForm FItem="BuildingAddModel" FormPadding="Padding.Is3">
    <AssetFormBlock FItem="BuildingAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6" OnItemAdd="@OnBuildingAdded">
        <AssetFormBlockField FItem="BuildingAddModel" Label="Building title:"
                             Validate=true FeedbackNone="" FeedbackGood="" FeedbackError="Building's title is required!"
                             ModelExpression="@((m) => m.Title)" />
    </AssetFormBlock>
</AssetForm>

@code {
    private bool WorkersFilterFunc(WorkerTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.WorkerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.WorkerAccessCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool JobsFilterFunc(JobTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.JobTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool BuildingsFilterFunc(BuildingTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BuildingTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private List<WorkerTableModel> WorkersElements = new List<WorkerTableModel>();

    private List<JobTableModel> JobsElements = new List<JobTableModel>();

    private List<BuildingTableModel> BuildingsElements = new List<BuildingTableModel>();

    protected override async Task OnInitializedAsync()
    {
        WorkersElements = new List<WorkerTableModel>().TestTableCollection();
        JobsElements = new List<JobTableModel>().TestTableCollection();
        BuildingsElements = new List<BuildingTableModel>().TestTableCollection();
    }
    private void OnWorkerAdded(WorkerAddModel itemToAdd)
    {
        WorkerTableModel item = itemToAdd.CreateTableModel();
        WorkersElements.Add(item);

        StateHasChanged();
    }
    private void OnJobAdded(JobAddModel itemToAdd)
    {
        JobTableModel item = itemToAdd.CreateTableModel();
        JobsElements.Add(item);

        StateHasChanged();
    }
    private void OnBuildingAdded(BuildingAddModel itemToAdd)
    {
        BuildingTableModel item = itemToAdd.CreateTableModel();
        BuildingsElements.Add(item);

        StateHasChanged();
    }
}
