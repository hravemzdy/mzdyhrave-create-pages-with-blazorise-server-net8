@page "/manage-assets"

@using Blazorise.DataGrid
@using EmployeeManagementApp.Components
@using EmployeeManagementApp.Components.ManageGrid
@using EmployeeManagementApp.Extensions;
@using EmployeeManagementApp.Models;

<ManageAssetGrid GItem="WorkerTableModel" Title="Workers" Elements="WorkersElements" FilterFunc="@WorkersFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumns>
        <GridColumn TGItem="WorkerTableModel" Title="Worker Id" Sortable=false Field=@nameof(WorkerTableModel.WorkerId) />
        <GridColumn TGItem="WorkerTableModel" Title="Worker name" Sortable=false Field=@nameof(WorkerTableModel.WorkerName) />
        <GridColumn TGItem="WorkerTableModel" Title="Worker access code" Sortable=false Field=@nameof(WorkerTableModel.WorkerAccessCode) />
        <GridColumn TGItem="WorkerTableModel" Title="Date added" Sortable=false Field=@nameof(WorkerTableModel.DateAdded) />
    </AssetGridColumns>
</ManageAssetGrid>
<ManageAssetForm @ref="workerForm" GItem="WorkerTableModel" FItem="WorkerAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6"
                 OnItemAdd="@OnWorkerAdded">
    <AssetFormFields>
        <FormField TGItem="WorkerTableModel" TFItem="WorkerAddModel" Label="First name:" Validate=true 
                   FeedbackNone="" FeedbackGood="" FeedbackError="First name is not valid"
                   GetModelValue="@((m) => {return m.FirstName;})" SetModelValue="@((m, val) => {m.FirstName = val; return true;})" />
        <FormField TGItem="WorkerTableModel" TFItem="WorkerAddModel" Label="Last name:" Validate=true 
                   FeedbackNone="" FeedbackGood="" FeedbackError="last name is not valid"
                   GetModelValue="@((m) => {return m.LastName;})" SetModelValue="@((m, val) => {m.LastName = val; return true;})" />
    </AssetFormFields>
</ManageAssetForm>

<ManageAssetGrid GItem="JobTableModel" Title="Jobs" Elements="JobsElements" FilterFunc="@JobsFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumns>
        <GridColumn TGItem="JobTableModel" Title="Job Id" Sortable=false Field=@nameof(JobTableModel.JobId) />
        <GridColumn TGItem="JobTableModel" Title="Job title" Sortable=false Field=@nameof(JobTableModel.JobTitle) />
        <GridColumn TGItem="JobTableModel" Title="Date added" Sortable=false Field=@nameof(JobTableModel.DateAdded) />
    </AssetGridColumns>
</ManageAssetGrid>
<ManageAssetForm @ref="jobForm" GItem="JobTableModel" FItem="JobAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6"
    OnItemAdd="@OnJobAdded">
    <AssetFormFields>
        <FormField TGItem="JobTableModel" TFItem="JobAddModel" Label="Job Title:" Validate=true
                   FeedbackNone="" FeedbackGood="" FeedbackError="Title is not valid"
                   GetModelValue="@((m) => {return m.Title;})" SetModelValue="@((m, val) => {m.Title = val; return true;})" />
    </AssetFormFields>
</ManageAssetForm>

<ManageAssetGrid GItem="BuildingTableModel" Title="Jobs" Elements="BuildingsElements" FilterFunc="@BuildingsFilterFunc" GridColumnSize="ColumnSize.Is10">
    <AssetGridColumns>
        <GridColumn TGItem="BuildingTableModel" Title="Job Id" Sortable=false Field=@nameof(BuildingTableModel.BuildingId) />
        <GridColumn TGItem="BuildingTableModel" Title="Job title" Sortable=false Field=@nameof(BuildingTableModel.BuildingTitle) />
        <GridColumn TGItem="BuildingTableModel" Title="Date added" Sortable=false Field=@nameof(BuildingTableModel.DateAdded) />
    </AssetGridColumns>
</ManageAssetGrid>
<ManageAssetForm @ref="buildingForm" GItem="BuildingTableModel" FItem="BuildingAddModel" ButtonLabel="ADD" FormColumnSize="ColumnSize.Is6" FormPadding="Padding.Is5.FromBottom"
                 OnItemAdd="@OnBuildingAdded">
    <AssetFormFields>
        <FormField TGItem="BuildingTableModel" TFItem="BuildingAddModel" Label="Building Title:" Validate=true
                   FeedbackNone="" FeedbackGood="" FeedbackError="Title is not valid"
                   GetModelValue="@((m) => {return m.Title;})" SetModelValue="@((m, val) => {m.Title = val; return true;})" />
    </AssetFormFields>
</ManageAssetForm>

@code {
    private ManageAssetForm<WorkerTableModel, WorkerAddModel> workerForm;
    private ManageAssetForm<JobTableModel, JobAddModel> jobForm;
    private ManageAssetForm<BuildingTableModel, BuildingAddModel> buildingForm;

    private bool WorkersFilterFunc(WorkerTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.WorkerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.WorkerAccessCode.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool JobsFilterFunc(JobTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.JobTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private bool BuildingsFilterFunc(BuildingTableModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.BuildingTitle.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private List<WorkerTableModel> WorkersElements = new List<WorkerTableModel>();

    private List<JobTableModel> JobsElements = new List<JobTableModel>();

    private List<BuildingTableModel> BuildingsElements = new List<BuildingTableModel>();

    protected override async Task OnInitializedAsync()
    {
        WorkersElements = new List<WorkerTableModel>().TestTableCollection();
        JobsElements = new List<JobTableModel>().TestTableCollection();
        BuildingsElements = new List<BuildingTableModel>().TestTableCollection();
    }
    private void OnWorkerAdded(WorkerAddModel itemToAdd)
    {
        WorkerTableModel item = itemToAdd.CreateTableModel();
        WorkersElements.Add(item);

        workerForm.ClearAddFields();
        StateHasChanged();
    }
    private void OnJobAdded(JobAddModel itemToAdd)
    {
        JobTableModel item = itemToAdd.CreateTableModel();
        JobsElements.Add(item);

        jobForm.ClearAddFields();
        StateHasChanged();
    }
    private void OnBuildingAdded(BuildingAddModel itemToAdd)
    {
        BuildingTableModel item = itemToAdd.CreateTableModel();
        BuildingsElements.Add(item);

        buildingForm.ClearAddFields();
        StateHasChanged();
    }
}
